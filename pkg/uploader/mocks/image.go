// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ImageService is an autogenerated mock type for the ImageService type
type ImageService struct {
	mock.Mock
}

// Resize provides a mock function with given fields: path, width, height
func (_m *ImageService) Resize(path string, width int32, height int32) string {
	ret := _m.Called(path, width, height)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int32, int32) string); ok {
		r0 = rf(path, width, height)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Upload provides a mock function with given fields: name, file
func (_m *ImageService) Upload(name string, file io.Reader) (string, error) {
	ret := _m.Called(name, file)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, io.Reader) (string, error)); ok {
		return rf(name, file)
	}
	if rf, ok := ret.Get(0).(func(string, io.Reader) string); ok {
		r0 = rf(name, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(name, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewImageService interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageService creates a new instance of ImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageService(t mockConstructorTestingTNewImageService) *ImageService {
	mock := &ImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
