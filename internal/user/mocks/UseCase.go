// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "nasdaqvfs/internal/models"

	mock "github.com/stretchr/testify/mock"

	utils "nasdaqvfs/pkg/utils"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Create(ctx context.Context, _a1 models.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UseCase) GetUserByID(ctx context.Context, userID int64) (models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, pq
func (_m *UseCase) GetUsers(ctx context.Context, pq *utils.PaginationQuery) ([]models.User, error) {
	ret := _m.Called(ctx, pq)

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *utils.PaginationQuery) ([]models.User, error)); ok {
		return rf(ctx, pq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *utils.PaginationQuery) []models.User); ok {
		r0 = rf(ctx, pq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *utils.PaginationQuery) error); ok {
		r1 = rf(ctx, pq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *UseCase) Login(ctx context.Context, username string, password string) (models.User, error) {
	ret := _m.Called(ctx, username, password)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.User, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserByID provides a mock function with given fields: ctx, userID, _a2
func (_m *UseCase) UpdateUserByID(ctx context.Context, userID int64, _a2 models.User) error {
	ret := _m.Called(ctx, userID, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, models.User) error); ok {
		r0 = rf(ctx, userID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
